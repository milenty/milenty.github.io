class API {
  constructor (apiUrl,param) {    
    this.apiUrl = apiUrl;
    this.param = param;
  }
//Возврат промиса получения данных с сервера
 getUserInfoPromise() {
  //  Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать 
  // в качестве параметра при инициализации класса 
  return fetch(`${this.apiUrl}/users/me`, {
    headers: {
      authorization: this.param.authorization
    }
  });
}
//'92ce07cc-19a0-4fcd-93cc-06bf1d6f27bf'
//Возврат промиса обновления данных на сервере
 updateUserInfoPromise(userName, userAbout) {
  //  Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать
  // в качестве параметра при инициализации класса 
  return fetch(`${this.apiUrl}/users/me`, {
    method: 'PATCH',
    headers: {
      authorization: this.param.authorization,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      name: userName,
      about: userAbout
    })
  });
}

//Возврат промиса обновления данных на сервере
getInitialCardsPromise() {
  //  Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать
  // в качестве параметра при инициализации класса 
  return fetch(`${this.apiUrl}/cards`, {
    headers: {
      authorization: this.param.authorization
    }
  });
}

 addCardPromise(cardName, cardLink) {
  //  Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать
  // в качестве параметра при инициализации класса 
  return fetch(`${this.apiUrl}/cards`, {
    method: 'POST',
    headers: {
      //  Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать
      // в качестве параметра при инициализации класса 
      authorization: this.param.authorization,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      name: cardName,
      link: cardLink
    })
  });
}
}
	/**
  * Здравствуйте. 
  *
 * 
   *  Надо исправить: Для начала вам необходимо создать класс API в котором каждый метод
   * Все запросы должны быть методами этого класс. Если мы получаем список карточек, то в классе должен быть метод getInitialCards
   * Если профиль пользователя то getUserInfo и так далее
   *  *
   * Самый правильный способ, как пример указан в брифе
   // url лучше передавать при инициализации класса в конструктор
   fetch(`url/cards`,
        {
     headers: {
            // ключ который надо передавать в параметрах
    authorization: param.authorization
          }
        })
    .then(res => {
      if (res.ok) {
     return res.json();
        }
        // если ошибка, переходим в catch
     return Promise.reject(`Ошибка: ${res.status
        }`);
      })
  .then((result) => {
        // обрабатываем результат
        // а точнее возвращает результат работы прямо в тот класс откуда вызывали        
      })
  .catch((err) => {
    console.log(err); // выведем ошибку в консоль
        });
  
 Хочу заметить что данные авторизации лучше передать при создании класса API в ввиде объекта	
  
   * Вызывать же методы класса Api лучше из других классов
   *
   * Стоит отметить, что реализации в классе API быть не должно. Точнее прямого взаимодействия. Методы могут вызываться
   * из других классов и возвращать данные, а работа с этими данными должны быть непосредственно в классах создаваемых в 8 спринте
  *
   * работа принимается только при исправлении всех "Надо исправить"
   *
 

 
    Надо исправить: Необходимо вынести такие параметры как IP адрес за класс и передавать
   в качестве параметра при инициализации класса
   Это такие параметры как
   '92ce07cc-19a0-4fcd-93cc-06bf1d6f27bf'
   https://praktikum.tk/cohort8/
 * 

Проверьте работу перед сдачей на ревью


 * работа принимается только при исправлении всех "Надо исправить"
 */


 /** 
  * Здравствуйте. Весь функционал рабочий. 
  * Работа принимается
  * 
  */